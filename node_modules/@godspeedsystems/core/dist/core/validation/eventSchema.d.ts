declare namespace fnNameOrTasks {
    const anyOf: ({
        type: string;
        items?: undefined;
    } | {
        type: string;
        items: {
            $ref: string;
        }[];
    })[];
}
declare const taskSchema: {
    $id: string;
    type: string;
    $ref: string;
    definitions: {
        task: {
            type: string;
            properties: {
                id: {
                    type: string;
                };
                fn: {
                    type: string;
                };
                args: {
                    anyOf: {
                        type: string;
                    }[];
                };
                description: {
                    type: string;
                };
                tasks: {
                    type: string;
                    items: {
                        $ref: string;
                    }[];
                };
            };
        };
    };
};
export const $id: string;
export const type: string;
export namespace properties {
    export namespace fn {
        const type_1: string;
        export { type_1 as type };
    }
    export namespace summary {
        const type_2: string;
        export { type_2 as type };
    }
    export namespace description {
        const type_3: string;
        export { type_3 as type };
    }
    export namespace body {
        const type_4: string;
        export { type_4 as type };
        export namespace properties_1 {
            namespace content {
                const type_5: string;
                export { type_5 as type };
            }
        }
        export { properties_1 as properties };
    }
    export namespace params {
        const type_6: string;
        export { type_6 as type };
        export const $ref: string;
    }
    export namespace parameters {
        const type_7: string;
        export { type_7 as type };
        const $ref_1: string;
        export { $ref_1 as $ref };
    }
    export namespace responses {
        const type_8: string;
        export { type_8 as type };
    }
    export namespace authn {
        const type_9: string;
        export { type_9 as type };
    }
    export { fnNameOrTasks as authz };
    export { fnNameOrTasks as on_request_validation_error };
    export { fnNameOrTasks as on_response_validation_error };
}
export const additionalProperties: boolean;
export namespace definitions {
    export namespace params_1 {
        const type_10: string;
        export { type_10 as type };
        export const items: {
            type: string;
            properties: {
                in: {
                    enum: string[];
                };
                name: {
                    type: string;
                };
                required: {
                    type: string;
                };
                schema: {
                    type: string;
                };
                description: {
                    type: string;
                };
                allow_empty_value: {
                    type: string;
                };
            };
            required: string[];
        }[];
        export const minItems: number;
        export const maxItems: number;
    }
    export { params_1 as params };
    export { taskSchema as task };
}
export const errorMessage: string;
export {};
